<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Swift Package Index Blog</title><description>    The Swift Package Index is the place to find Swift packages.
    The project is open-source and community driven, and this blog tells the story of its development.</description><link>https://blog.swiftpackageindex.com</link><language>en</language><lastBuildDate>Thu, 10 Sep 2020 04:58:14 +0000</lastBuildDate><pubDate>Thu, 10 Sep 2020 04:58:14 +0000</pubDate><ttl>250</ttl><atom:link href="https://blog.swiftpackageindex.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://blog.swiftpackageindex.com/posts/building-3238-packages-for-apple-silicon</guid><title>Building 3,238 Swift Packages for Apple Silicon</title><description>As part of the Swift Package Index build system, we have processed what must be the most extensive test of Apple Silicon compatibility outside of Apple. Here‚Äôs what we found.</description><link>https://blog.swiftpackageindex.com/posts/building-3238-packages-for-apple-silicon</link><pubDate>Wed, 9 Sep 2020 12:00:00 +0000</pubDate><content:encoded><![CDATA[<p>As part of the <a href="https://blog.swiftpackageindex.com/posts/launching-language-and-platform-package-compatibility/">Swift Package Index build system</a>, we have processed what must be the most extensive test of Apple Silicon compatibility outside of Apple.</p><p>At the time of writing, we currently have 12,942 Apple Silicon builds in our database covering 3,238 packages. Why so many? We test up to <a href="https://swiftpackageindex.com/SwifQL/SwifQL/builds">three versions of each package</a> and compile each version with both <code>xcodebuild</code> and <code>swift build</code>.</p><p>I‚Äôm sure that many of the Apple Silicon DTK machines Apple shipped around the world are working very hard, testing apps for compatibility, but I‚Äôm not sure any of them have worked quite as hard as ours has. üöÄ</p><h2>What did we find?</h2><p>As you might expect, there‚Äôs plenty of good news. For packages with successful Intel builds, the <em>vast majority</em> also successfully build for Apple Silicon. üëç</p><p>There are failures, though, and the most interesting failures are where the build fails on Apple Silicon while the corresponding Intel build succeeds. In cases like this, that indicates a compatibility issue that will potentially need some attention from the package author. We‚Äôve identified 139 packages (~4%) where this is the case, and have <a href="https://gist.github.com/daveverwer/ae08ad14a7a975e0488503282b4f1dbf">compiled a list of them for reference</a>.</p><p>There are a few common errors that we‚Äôre observing in these failures, and most of them are from one of the following problems:</p><ul><li>Any inline assembly will fail, obviously!</li><li><code>Float80</code> is unavailable.</li><li><code>x86_thread_state64_t</code> is unavailable.</li><li><code>__darwin_arm_thread_state64' has no member '__rsp'</code>.</li><li><code>cannot convert value of type 'CVaListPointer' to expected argument type '__darwin_va_list?'</code>.</li><li>Sometimes, the compiler crashes!</li></ul><p>Even though 139 failing packages might sound like a lot, it‚Äôs not that bad, especially when you consider that many of the failures all fail due to an issue in a common base dependency, <a href="https://swiftpackageindex.com/PerfectlySoft/Perfect"><code>PerfectLib</code></a>.</p><h2>Where do we go from here?</h2><p>Even though the results are generally positive, it does show that there‚Äôs a bit of work that the community need to do to ensure the transition to Apple Silicon is as smooth as possible.</p><p>If you‚Äôre a package author and do not have a DTK machine at your disposal, please feel free to use ours via the Swift Package Index build system! Make changes to your packages, push them to a pre-release tag (for example, X.X.X-arm-beta-X) and the build system will pick up that tag and build it. You should see new build results, usually within a couple of hours of pushing a tag.</p><p>If you have any problems with the build system, there‚Äôs a couple of ways to contact us. We‚Äôre in the <code>#swiftpackageindex</code> channel over at the <a href="https://swift-package-manager.herokuapp.com">SwiftPM Slack</a>, or if it looks like there might be something wrong, please <a href="https://github.com/SwiftPackageIndex/SwiftPackageIndex-Server/issues/new">raise an issue on GitHub</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://blog.swiftpackageindex.com/posts/launching-language-and-platform-package-compatibility</guid><title>Launching Language and Platform Package Compatibility</title><description></description><link>https://blog.swiftpackageindex.com/posts/launching-language-and-platform-package-compatibility</link><pubDate>Thu, 20 Aug 2020 12:00:00 +0000</pubDate><content:encoded><![CDATA[<p>What‚Äôs the first question you need an answer to after finding a package that fits your needs?</p><blockquote><p>‚ÄúDoes this package work with the Swift version and platform that my app uses?‚Äù</p></blockquote><p>When we initially launched the Swift Package Index, we attempted to answer this question with the metadata available in the package manifest. Namely the <a href="https://developer.apple.com/documentation/swift_packages/package/3197887-swiftlanguageversions"><code>swiftLanguageVersions</code></a> and <a href="https://developer.apple.com/documentation/swift_packages/package/3197886-platforms"><code>platforms</code></a> properties.</p><p>The problem is that neither of those properties is perfect. <code>swiftLanguageVersions</code> isn‚Äôt granular enough, only <a href="https://developer.apple.com/documentation/swift_packages/swiftversion">officially</a> allowing values of <code>v4</code>, <code>v4_2</code>, and <code>v5</code>. The <code>platforms</code> property is better, but doesn‚Äôt let package authors declare compatibility with non-Apple operating systems such as Linux.</p><p>Wouldn‚Äôt it be fantastic if you could see a matrix like this for <em>every</em> package? üòç</p><picture>
  <source srcset="/images/promisekit-language-and-platform-metadata~dark.png" media="(prefers-color-scheme: dark)">
  <img src="https://blog.swiftpackageindex.com/images/promisekit-language-and-platform-metadata~light.png" alt="The language and platform compatibility matrix for PromiseKit.">
</picture><p>Look at how information-rich that matrix is. You can instantly see that the latest stable version of <a href="https://swiftpackageindex.com/mxcl/PromiseKit">PromiseKit</a> is compatible with every version of Swift back to 4.2, and every platform, including Linux. Then, you can see that the alpha version in development drops support for iOS, tvOS, and watchOS, and Swift 4.2. That seems suspicious, right? Keep looking, and you‚Äôll see that the default branch fixes all those issues and restores compatibility. I‚Äôm confident looking at that matrix that when 7.0.0 is released, it‚Äôll have green ticks across the board, but I also know to not depend on this current alpha. That‚Äôs practical, actionable information.</p><p>When we started thinking about how best to solve this problem, the obvious best solution was to build the packages! What better way to see if a package is compatible with Swift 4.2 than to build it with the version of <code>xcodebuild</code> that shipped with Xcode 10.1.</p><p>So that‚Äôs what we did, and it‚Äôs available right now. Why not <a href="https://swiftpackageindex.com">give it a try</a> by searching for a few of your favourite packages? üöÄ</p><h3>Accurate, real-world compatibility data</h3><p>It‚Äôs a little more complicated than ‚Äújust build each package‚Äù though. A package might build with Swift 5.2 on iOS, but that same build might fail using Swift 5.2 on macOS due to a UIKit dependency, or other macOS specific issue. What‚Äôs needed is a <em>matrix</em> of builds to generate an accurate picture of compatibility.</p><p>So, if we run builds using Swift 5.1 on iOS, macOS, tvOS, watchOS, and with Linux and <em>any</em> of them pass, it‚Äôs compatible with Swift 5.2. If <em>any</em> version of Swift builds without failure on iOS, then the package supports iOS.</p><p>We ended up with a platform list of:</p><ul><li>iOS using <code>xcodebuild</code></li><li>macOS using <code>xcodebuild</code></li><li>macOS using <code>swift build</code> (there are good reasons where <code>swift build</code> would pass in circumstances where <code>xcodebuild</code> might fail)</li><li>macOS using <code>xcodebuild</code> on Apple Silicon (yes, compiled using a DTK!)</li><li>macOS using <code>swift build</code> on Apple Silicon</li><li>tvOS using <code>xcodebuild</code></li><li>watchOS using <code>xcodebuild</code></li><li>Linux using <code>swift build</code></li></ul><p>We then decided on a list of Swift compiler versions we‚Äôd like to check compatibility with:</p><ul><li>Swift 4.2 (4.2.1)</li><li>Swift 5.0 (5.0.1)</li><li>Swift 5.1 (5.1.3)</li><li>Swift 5.2 (5.2.4)</li><li>Swift 5.3 (beta)</li></ul><p>That‚Äôs up to 32 builds per package, but that‚Äôs just the beginning. What if there‚Äôs a stable release and a beta release? The stable version might support Swift 4.2 and higher, and the new beta might drop support for anything less than Swift 5.2. That‚Äôs information which would be important when choosing a package, so we need to show it. As we also track the status of the default branch, we must build that too, and we‚Äôve quickly arrived at a place where we might need to run 96 builds <em>per package</em>! With almost 3,200 packages in the index, that‚Äôs potentially more than 300,000 builds! üòÖ</p><p>In practice, it‚Äôs less than that as most packages don‚Äôt have a current beta release, but it‚Äôs still a <em>lot</em> of builds. We‚Äôve processed more than 200,000 builds as I write this, and we‚Äôre not quite finished. As of today, we‚Äôre at 99% though, so we almost made it before launch! üò¨</p><p>If you‚Äôve been following <a href="https://twitter.com/daveverwer/status/1291808885259620353">these tweets</a>, it should be obvious what all that processing was! Let‚Äôs take a look at the last <strong>30 days</strong> of CPU graphs for our production server, a 2018 Mac mini with 32Gb RAM and a 6-core i7 CPU:</p><img src="https://blog.swiftpackageindex.com/images/production-server-thirty-day-cpu-graph.png" alt="A graph showing a few spikes of CPU activity, followed by a sustained 100% CPU load."/><p>You can see a few of our final test runs in that graph, and then we started processing for real. Since then, we‚Äôve kept the CPU completely pegged for more than two weeks. We‚Äôve also had our staging Mac mini, a spare 2016 MacBook Pro, and a DTK working on builds too.</p><h3>Everyone loves badges</h3><p>Providing compatibility information on this site is one thing, but everyone loves adorning their packages pages with <a href="https://shields.io">shields.io</a> badges, don‚Äôt they? If you maintain an open-source project, wouldn‚Äôt you like to show off real compatibility status in your README file, like this?</p><img src="https://blog.swiftpackageindex.com/images/rester-readme-with-spi-badges.png" alt="A screenshot of a GitHub page with badges that show the Swift and platform compatibility for the package."/><p>If you‚Äôre a package author, click the ‚ÄúCopy badge‚Äù button below each of the compatibility matrices and you‚Äôll have a Markdown image link in your clipboard, ready to use.</p><p>Your users will always see live, accurate compatibility information that updates whenever you release a new version.</p><h3>Credit where it‚Äôs due!</h3><p>First of all, we‚Äôd like to thank our kind friends at <a href="https://macstadium.com">MacStadium</a> for providing the significant hosting resources for this project as part of their <a href="https://www.macstadium.com/opensource">open-source programme</a>. At one point we were a little concerned that we might melt their machines, and we very glad that we didn‚Äôt. They‚Äôve performed incredibly.</p><p>We also want to say thank you to <a href="https://twitter.com/aciidb0mb3r">Ankit Aggarwal</a> and <a href="https://twitter.com/neonacho">Boris B√ºgling</a> of Apple. Their tireless help and support on the <a href="https://swift-package-manager.herokuapp.com">SwiftPM Slack</a> saved us countless hours figuring out the correct way to approach this problem.</p><p>Finally, we‚Äôd love to say thank you to everyone who provided help and feedback along the way as we built this feature. We couldn‚Äôt have done it without any of you.</p><h3>Wrapping up</h3><p>Some package authors set up continuous integration for their packages and of course, that includes a build step. That usually only covers one version of Swift though, and the information gets hidden away in a different place in each repo. We think that by centralising this data and making it available for <em>all</em> packages, we should be able to help this community make better decisions about their dependencies, and that‚Äôs what this site is all about.</p><p>We hope you love this feature as much as we do! ‚ù§Ô∏è</p>]]></content:encoded></item><item><guid isPermaLink="true">https://blog.swiftpackageindex.com/posts/say-hello-to-the-swift-package-index-blog</guid><title>Say Hello to the Swift Package Index Blog</title><description>It‚Äôs always hard to know when to ship v1 of a project. Which features get included? Are there things that can wait? It‚Äôs a balancing act. You‚Äôre excited to show the world what you built, but is it good enough?</description><link>https://blog.swiftpackageindex.com/posts/say-hello-to-the-swift-package-index-blog</link><pubDate>Sun, 16 Aug 2020 12:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Hello! üëã</p><p>It‚Äôs always hard to know when to ship v1 of a project. Which features get included? Are there things that can wait? It‚Äôs a balancing act. You‚Äôre excited to show the world what you built, but is it good enough?</p><p>One decision we made when shipping the <a href="https://swiftpackageindex.com">Swift Package Index</a> was that a blog could wait. Looking back now, it feels like that was the right decision. The launch went smoothly, you all reacted very kindly and positively to it, and we went back to work fixing bugs and working on new features.</p><p>However, we always knew we‚Äôd need somewhere to write about what we are doing with this project. We‚Äôd love to tell you about some of the interesting technical challenges we faced, but most of all we want to tell you about the new features we‚Äôve been building...</p><p>What features? You‚Äôll have to wait just one more week to find out what we‚Äôve been working on, but we‚Äôre pretty excited about it, and that‚Äôs why now was the right time to launch this blog.</p><p class="dim">Now we just need to keep writing on it! üò¨</p>]]></content:encoded></item></channel></rss>